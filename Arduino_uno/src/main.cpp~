#include <Arduino.h>
#include <AccelStepper.h>
#include <MultiStepper.h>

#define MAX_SPEED 40
#define MOVE_DELAY 300
#define BUFFER_SIZE 32

AccelStepper stepper1(AccelStepper::FULL4WIRE, 4, 5, 6, 7);
AccelStepper stepper2(AccelStepper::FULL4WIRE, 8, 9, 10, 11);

MultiStepper steppers;

long positions[2];
char buffer[BUFFER_SIZE];

void setup() {
  Serial.begin(9600); // Initialize serial communication at 9600 baud rate
  pinMode(12, OUTPUT); // Init the serial pins

  stepper1.setMaxSpeed(MAX_SPEED);
  stepper2.setMaxSpeed(MAX_SPEED);

  steppers.addStepper(stepper1);
  steppers.addStepper(stepper2);
  
  // init motor positions
  positions[0] = 0;
  positions[1] = 0;
  //steppers.moveTo(positions);
  //steppers.runSpeedToPosition();
}

void loop() {
  while (Serial.available() == 0) {}

  //int serial_data = Serial.readBytesUntil("A", buffer, BUFFER_SIZE);

  int serial_data = Serial.readBytes(buffer, BUFFER_SIZE);

  int command, value;

  if (sscanf(buffer, "%d %d", &command, &value) != 2) {
    Serial.print("n");
  }

    
  // Perform actions based on the command
  switch (command) {
  case 1: // Move forward
    positions[0] = positions[0] + value;
    positions[1] = positions[1] - value;
    steppers.moveTo(positions);
    steppers.runSpeedToPosition();
    Serial.print("y");
    break;
  case 2: // Move backward
    positions[0] -= value;
    positions[1] += value;
    steppers.moveTo(positions);
    steppers.runSpeedToPosition();
    Serial.print("y");
    break;
  case 3: // Rotate clockwise
    positions[0] -= value;
    positions[1] -= value;
    steppers.moveTo(positions);
    steppers.runSpeedToPosition();
    Serial.print("y");
    break;
  case 4: // Rotate counterclockwise
    positions[0] += value;
    positions[1] += value;
    steppers.moveTo(positions);
    steppers.runSpeedToPosition();
    Serial.print("y");
    break;
  case 5: // FIRE
    digitalWrite(12, HIGH);
    delay(value * 1000);
    digitalWrite(12, LOW);
    Serial.print("y");
    break;
  default:
    Serial.print("n");
    break;
    }

  memset(buffer, 0, BUFFER_SIZE);
}




